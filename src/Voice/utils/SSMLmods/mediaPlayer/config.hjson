{
    //THIS IS A SAMPLE SSML FILE. Use this as a template to create your own mods. A sample for every type is given.
    //NOTE: Everything except stuff in additionalInfo is required and the mod will not run without them (although having a description and author name/username is a good idea so that the users know what's going on with the mod)
    
    "modName":"mediaPlayer"

    //This is extremely important. This will be required for pNpm for updating.
    //The first number indicates release number and second number indicates incremental (tiny) changes.
    //TODO(pNpm): manage versions for the user
    "versionNumber":"0.1",

    "modtype": "SSML"
    "tagStart": "<media>",
    "tagEnd":"</media>",
    //If you have multiple python files and the code is divided between those, you have to specify the one that will return the required values (even if you have a single file, you have to specify it here). 
    // The main() function within that will be called during execution. This single file has to be in the same directory as this config, you can do whatever you want with the rest. 
    "fileNameToBeExecuted": "mediaPlayer",

    //Whether or not you want this mod to execute. Useful for debugging and saving time sometimes and what have you.
    shouldExecute: true,

    //TODO(pNpm): Generate a requirements.txt file for all packages being installed at the same time.
    "modulesRequired":["soundfile","sounddevice","os"],
    "pythonVersion": 3.8,

    //If the mod is experimental, a notice is given during usage and installation, warning users regarding instabilites and potential problems. Use this only if you are still developing the mod or the mod is known to fail in certain cases
    "isModExperimental": false,

    //TYPES: direct: Directly Edits the elements in list passed to speak() function in voice.py, after TxtPreprocessor() and pauseProcessor() (<pause> can't be used here but you can pass a zero array with the number of zeroes being the sample rate * time in seconds).
    //           Conditions:
    //                  - returned value should not have any SSML tags (mods or otherwise). It won't break the execution but the tags will be spoken as well.
    //                  - You can return string, float (no ints), or a list/numpy array. The string will be spoken directly, the float will "pause" the TTS model and the list/numpy array will be "played" as-is using sounddevice.play()
    //                  - While you can return string, it's better to use replacement type unless you have a specific reason since TTS inference list will be split and the time between inferences might be a bit jarring for the end-user.
    
    //       replacement: Edits the string before TxtPreprocessor() in SSMLpostprocessor.py
    //           Conditions:
    //                  - Can't return int or list, output should be strictly a string
    //             
    //       audio: edits the array formed after Inference. If you want to do some DSP stuff or add audio filters or whatever, you can do that now but you must be aware that
                  //the main() function in "filenameToBeExecuted" will get a list as input, in place of a string.
    //              Conditions:
    //                  - Every filter/mod of this type *will* execute without fail unless explicitly disabled (using 'shouldExecute')
    "type": "direct",

    //Stuff in here is optional. These will be printed during installation and occasionally during usage.
    "additionalInfo":{
        "License":"MIT",
        "LicenseFile":null,
        "Author":"Tanmay Vemuri",
        "Description": "This mod's <media> tag inserts an audio file into the synthesized voice. This mod only accepts audio in the form of monochannel .wav, no limit on sample rate but it's a good idea to stick to commonly used sample rates. (e.g. 16000, 22050, 44100 etc.) "
    }
    
}